<?php 

namespace Core;
use ReflectionMethod;
use Exception;

use Core\Router;

class RouteResolver extends Router{
    public $routes;
    public $container;

    public function __construct($routes, $container) {
        $this->routes = $routes;
        $this->container = $container;
    }

    public function handleRoute($requestMethod, $requestUri) {
        foreach($this->routes[$requestMethod] as $route => $action) {
            $routePattern =  $this->routeToPattern($route);
            if(preg_match($routePattern, $requestUri, $matches)) { 
            

                [$controllerName, $methodName] = explode('@', $action);
                $controller = $this->container->resolve($controllerName);

                $reflection = new ReflectionMethod($controllerName, $methodName);
                $parameters = $reflection->getParameters();
                $dependencies = [];
                foreach ($parameters as $parameter) {
               
                if ($parameter->getType() !== null) {
                    // Check if the parameter name exists in the route parameters
                    $paramName = $parameter->getName();
                    if (isset($routeParams[$paramName])) {
                        // Use the value from the route parameters if available
                        $dependencies[] = $routeParams[$paramName];
                    } else {
                        // Otherwise, resolve the dependency as usual
                        $dependencies[] = $this->container->resolve($parameter->getType()->getName());
                    }
                }
            }
                
            call_user_func_array([$controller, $methodName], $dependencies);
            return;
            }
        }

        throw new Exception ('Route Not Found!!');
    }
}